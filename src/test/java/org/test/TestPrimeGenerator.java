package org.test;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.prime.generator.PrimeNumberGenerator;


public class TestPrimeGenerator {

	
	
	private static PrimeNumberGenerator primeNumberGenerator = new PrimeNumberGenerator();;
	private static Integer lowerRange = 2;
	private static Integer upperRange = 10;
	private static List<Integer> primesBySimpleAlgorithm  = new ArrayList<Integer>();
	private static List<Integer> primesByComplexAlgorithm = new ArrayList<Integer>();
	private static List<Integer> primesByParallelAlgorithm = new ArrayList<Integer>();
	

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		//all the lists generated by separate algorithms should be exactly same
		Assert.assertTrue(primesBySimpleAlgorithm.containsAll(primesByComplexAlgorithm));
		Assert.assertTrue(primesBySimpleAlgorithm.containsAll(primesByParallelAlgorithm));
		Assert.assertTrue(primesByComplexAlgorithm.containsAll(primesByParallelAlgorithm));
		
	}

	@Test
	public void testSimpleAlgorithm() {
		//test the prime numbers between 2 and 10
		List<Integer> primeNumbers = primeNumberGenerator.generatePrimeNumbersSimple(2, 10);
		//list of all prime numbers between 2 and 200
		Integer[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199};
		List<Integer> ground_truth = new ArrayList<>(Arrays.asList(primes)); //ground truth, we know these are the prime numbers. 
		if(!ground_truth.containsAll(primeNumbers)){
			Assert.fail("Not all are primes");
		}
		
		//let's test the lower and upper range, to verify that prime generator abides by these ranges.
		//generate list of prime numbers between 2 and 200, and it should return a list exactly same as out ground truth
		primeNumbers = primeNumberGenerator.generatePrimeNumbersSimple(2, 200);
		if(!ground_truth.containsAll(primeNumbers) || !primeNumbers.containsAll(ground_truth)){
			Assert.fail("provided range is crossed");
		}
		//this will be compared to the results of other algorithms in @AfterClass
		primesBySimpleAlgorithm = primeNumberGenerator.generatePrimeNumbersSimple(lowerRange, upperRange);
	}
	
	@Test
	public void testComplexAlgorithm() {
		//test the prime numbers between 2 and 10 
		List<Integer> primeNumbers = primeNumberGenerator.generatePrimeNumbersComplex(2, 10);
		//list of all prime numbers between 2 and 200
		Integer[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199};
		List<Integer> ground_truth = new ArrayList<>(Arrays.asList(primes)); //ground truth, we know these are the prime numbers. 
		if(!ground_truth.containsAll(primeNumbers)){
			Assert.fail("Not all are primes");
		}
		
		//let's test the lower and upper range, to verify that prime generator abides by these ranges.
		//generate list of prime numbers between 2 and 200, and it should return a list exactly same as out ground truth
		primeNumbers = primeNumberGenerator.generatePrimeNumbersComplex(2, 200);
		if(!ground_truth.containsAll(primeNumbers) || !primeNumbers.containsAll(ground_truth)){
			Assert.fail("provided range is crossed");
		}
		//this will be compared to the results of other algorithms in @AfterClass
		primesBySimpleAlgorithm = primeNumberGenerator.generatePrimeNumbersComplex(lowerRange, upperRange);
	}
	
	@Test
	public void testParallelAlgorithm() {
		//test the prime numbers between 2 and 10
		List<Integer> primeNumbers = primeNumberGenerator.generatePrimeNumbersParallel(2, 10, "Simple");
		//list of all prime numbers between 2 and 200
		Integer[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199};
		List<Integer> ground_truth = new ArrayList<>(Arrays.asList(primes)); //ground truth, we know these are the prime numbers. 
		if(!ground_truth.containsAll(primeNumbers)){
			Assert.fail("Not all are primes");
		}
		
		//let's test the lower and upper range, to verify that prime generator abides by these ranges.
		//generate list of prime numbers between 2 and 200, and it should return a list exactly same as out ground truth
		primeNumbers = primeNumberGenerator.generatePrimeNumbersParallel(2, 200, "Simple");
		if(!ground_truth.containsAll(primeNumbers) || !primeNumbers.containsAll(ground_truth)){
			Assert.fail("provided range is crossed");
		}
		//this will be compared to the results of other algorithms in @AfterClass
		primesBySimpleAlgorithm = primeNumberGenerator.generatePrimeNumbersParallel(lowerRange, upperRange, "Simple");
	}

}
